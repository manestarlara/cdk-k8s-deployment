AWSTemplateFormatVersion: '2010-09-09'
Description: Create an EC2 instance with a Kubernetes cluster

Parameters:
  VPC:
    Type: String
    Default: vpc-0017e873a1216dee3
  Subnet:
    Type: String
    Default: subnet-072d37834615128a1
  KeyPair:
    Type: String
    Default: K8s-Deployment
  AMI:
    Type: String
    Default: ami-04dfd853d88e818e8

Resources:
  K8sRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole


  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  Route:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable

  K8sSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/8
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/8
        - IpProtocol: tcp
          FromPort: 6443
          ToPort: 6443
          CidrIp: 10.0.0.0/8
        - IpProtocol: tcp
          FromPort: 2379
          ToPort: 2380
          CidrIp: 10.0.0.0/8
        - IpProtocol: tcp
          FromPort: 10250
          ToPort: 10252
          CidrIp: 10.0.0.0/8
        - IpProtocol: udp
          FromPort: 6783
          ToPort: 6784
          CidrIp: 10.0.0.0/8
        - IpProtocol: tcp
          FromPort: 6783
          ToPort: 6783
          CidrIp: 10.0.0.0/8
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 10.0.0.0/8


  K8sInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AMI
      InstanceType: t2.micro
      SecurityGroupIds:
        - !Ref K8sSecurityGroup
      SubnetId: !Ref Subnet
      KeyName: !Ref KeyPair
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          
          # Update the package repository and install required dependencies
          sudo apt-get update -y
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          
          # Install Docker
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo usermod -aG docker ec2-user
          
          # Install Kubernetes components (kubeadm, kubectl)
          sudo apt-get update && sudo apt-get install -y apt-transport-https curl
          curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
          echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
          sudo apt-get update
          sudo apt-get install -y kubelet kubeadm kubectl
          sudo apt-mark hold kubelet kubeadm kubectl
          
          # Install Helm
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
          
          # Install AWS CLI
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
          
          # Install FluxCD
          curl -s https://fluxcd.io/install.sh | sudo bash
          
          # Install Flagger
          kubectl apply -k github.com/fluxcd/flagger//kustomize/aws
          
          # Install CDK
          npm install -g aws-cdk
          
          # Install K9s
          wget https://github.com/derailed/k9s/releases/download/v0.24.7/k9s_Linux_x86_64.tar.gz
          tar -xzvf k9s_Linux_x86_64.tar.gz
          sudo mv k9s /usr/local/bin
          
          # Add kubectl bash completion
          echo "source <(kubectl completion bash)" >> ~/.bashrc
