apiVersion: v1
data:
  allow-snippet-annotations: "true"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: k8s-deployment
    app.kubernetes.io/name: k8s-deployment
    app.kubernetes.io/part-of: k8s-deployment
    app.kubernetes.io/version: 1.8.1
  name: k8s-deployment-controller
  namespace: k8s-deployment
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: k8s-deployment
    app.kubernetes.io/name: k8s-deployment
    app.kubernetes.io/part-of: k8s-deployment
    app.kubernetes.io/version: 1.8.1
  name: k8s-deployment-controller
  namespace: k8s-deployment
spec:
  externalTrafficPolicy: Local
  ipFamilies:
    - IPv4
  ipFamilyPolicy: SingleStack
  ports:
    - appProtocol: http
      name: http
      port: 80
      protocol: TCP
      targetPort: http
    - appProtocol: https
      name: https
      port: 443
      protocol: TCP
      targetPort: https
  selector:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: k8s-deployment
    app.kubernetes.io/name: k8s-deployment
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: k8s-deployment
    app.kubernetes.io/name: k8s-deployment
    app.kubernetes.io/part-of: k8s-deployment
    app.kubernetes.io/version: 1.8.1
  name: k8s-deployment-controller-admission
  namespace: k8s-deployment
spec:
  ports:
    - appProtocol: https
      name: https-webhook
      port: 443
      targetPort: webhook
  selector:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: k8s-deployment
    app.kubernetes.io/name: k8s-deployment
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: k8s-deployment
    app.kubernetes.io/name: k8s-deployment
    app.kubernetes.io/part-of: k8s-deployment
    app.kubernetes.io/version: 1.8.1
  name: k8s-deployment-controller
  namespace: k8s-deployment
spec:
  minReadySeconds: 0
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: k8s-deployment
      app.kubernetes.io/name: k8s-deployment
  template:
    metadata:
      labels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: k8s-deployment
        app.kubernetes.io/name: k8s-deployment
        app.kubernetes.io/part-of: k8s-deployment
        app.kubernetes.io/version: 1.8.1
    spec:
      containers:
        - args:
            - /nginx-ingress-controller
            - --publish-service=$(POD_NAMESPACE)/k8s-deployment-controller
            - --election-id=k8s-deployment-leader
            - --controller-class=k8s.io/k8s-deployment
            - --ingress-class=nginx
            - --configmap=$(POD_NAMESPACE)/k8s-deployment-controller
            - --validating-webhook=:8443
            - --validating-webhook-certificate=/usr/local/certificates/cert
            - --validating-webhook-key=/usr/local/certificates/key
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: LD_PRELOAD
              value: /usr/local/lib/libmimalloc.so
          image: registry.k8s.io/k8s-deployment/controller:v1.8.1@sha256:e5c4824e7375fcf2a393e1c03c293b69759af37a9ca6abdb91b13d78a93da8bd
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command:
                  - /wait-shutdown
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: controller
          ports:
            - containerPort: 80
              name: http
              protocol: TCP
            - containerPort: 443
              name: https
              protocol: TCP
            - containerPort: 8443
              name: webhook
              protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            requests:
              cpu: 100m
              memory: 90Mi
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
                - NET_BIND_SERVICE
              drop:
                - ALL
            runAsUser: 101
          volumeMounts:
            - mountPath: /usr/local/certificates/
              name: webhook-cert
              readOnly: true
      dnsPolicy: ClusterFirst
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: k8s-deployment
      terminationGracePeriodSeconds: 300
      volumes:
        - name: webhook-cert
          secret:
            secretName: k8s-deployment-admission
      tolerations:
        - key: node-role.kubernetes.io/control-plane
          operator: Equal
          value: "true"
          effect: NoExecute
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: k8s-deployment
    app.kubernetes.io/name: k8s-deployment
    app.kubernetes.io/part-of: k8s-deployment
    app.kubernetes.io/version: 1.8.1
  name: k8s-deployment-admission-create
  namespace: k8s-deployment
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/component: admission-webhook
        app.kubernetes.io/instance: k8s-deployment
        app.kubernetes.io/name: k8s-deployment
        app.kubernetes.io/part-of: k8s-deployment
        app.kubernetes.io/version: 1.8.1
      name: k8s-deployment-admission-create
    spec:
      containers:
        - args:
            - create
            - --host=k8s-deployment-controller-admission,k8s-deployment-controller-admission.$(POD_NAMESPACE).svc
            - --namespace=$(POD_NAMESPACE)
            - --secret-name=k8s-deployment-admission
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: registry.k8s.io/k8s-deployment/kube-webhook-certgen:v20230407@sha256:543c40fd093964bc9ab509d3e791f9989963021f1e9e4c9c7b6700b02bfb227b
          imagePullPolicy: IfNotPresent
          name: create
          securityContext:
            allowPrivilegeEscalation: false
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: OnFailure
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
      serviceAccountName: k8s-deployment-admission
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: k8s-deployment
    app.kubernetes.io/name: k8s-deployment
    app.kubernetes.io/part-of: k8s-deployment
    app.kubernetes.io/version: 1.8.1
  name: k8s-deployment-admission-patch
  namespace: k8s-deployment
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/component: admission-webhook
        app.kubernetes.io/instance: k8s-deployment
        app.kubernetes.io/name: k8s-deployment
        app.kubernetes.io/part-of: k8s-deployment
        app.kubernetes.io/version: 1.8.1
      name: k8s-deployment-admission-patch
    spec:
      containers:
        - args:
            - patch
            - --webhook-name=k8s-deployment-admission
            - --namespace=$(POD_NAMESPACE)
            - --patch-mutating=false
            - --secret-name=k8s-deployment-admission
            - --patch-failure-policy=Fail
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          image: registry.k8s.io/k8s-deployment/kube-webhook-certgen:v20230407@sha256:543c40fd093964bc9ab509d3e791f9989963021f1e9e4c9c7b6700b02bfb227b
          imagePullPolicy: IfNotPresent
          name: patch
          securityContext:
            allowPrivilegeEscalation: false
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: OnFailure
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
      serviceAccountName: k8s-deployment-admission
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: k8s-deployment
    app.kubernetes.io/name: k8s-deployment
    app.kubernetes.io/part-of: k8s-deployment
    app.kubernetes.io/version: 1.8.1
  name: nginx
spec:
  controller: k8s.io/k8s-deployment
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: k8s-deployment
    app.kubernetes.io/name: k8s-deployment
    app.kubernetes.io/part-of: k8s-deployment
    app.kubernetes.io/version: 1.8.1
  name: k8s-deployment-admission
webhooks:
  - admissionReviewVersions:
      - v1
    clientConfig:
      service:
        name: k8s-deployment-controller-admission
        namespace: k8s-deployment
        path: /networking/v1/ingresses
    failurePolicy: Fail
    matchPolicy: Equivalent
    name: validate.nginx.ingress.kubernetes.io
    rules:
      - apiGroups:
          - networking.k8s.io
        apiVersions:
          - v1
        operations:
          - CREATE
          - UPDATE
        resources:
          - ingresses
    sideEffects: None
